// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id        String   @id @default(cuid())
    name      String
    email     String   @unique
    password  String
    avatar    String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    sentRequests     Requests[] @relation("sentRequests")
    receivedRequests Requests[] @relation("receivedRequests")
    chats            Chat[]     @relation("userChats")
    messages         Message[]  @relation("userMessages")

    friendUser1 Friends[] @relation("UserFriend1")
    friendUser2 Friends[] @relation("UserFriend2")

    accounts Account[]
    sessions Session[]
}

model Chat {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    participants User[]    @relation("userChats")
    messages     Message[] @relation("chatMessages")
}

model Message {
    id        String   @id @default(cuid())
    content   String
    createdAt DateTime @default(now())
    senderId  String
    chatId    String

    sender User @relation("userMessages", fields: [senderId], references: [id])
    chat   Chat @relation("chatMessages", fields: [chatId], references: [id])
}

model Requests {
    id         String   @id @default(cuid())
    senderId   String
    receiverId String
    status     Status   @default(PENDING) // PENDING, ACCEPTED, REJECTED
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    sender   User @relation("sentRequests", fields: [senderId], references: [id])
    receiver User @relation("receivedRequests", fields: [receiverId], references: [id])

    @@unique([senderId, receiverId])
}

model Friends {
    id        String   @id @default(cuid())
    userId1   String
    userId2   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user1 User @relation("UserFriend1", fields: [userId1], references: [id])
    user2 User @relation("UserFriend2", fields: [userId2], references: [id])

    @@unique([userId1, userId2])
}

// Enum for request status
enum Status {
    PENDING
    ACCEPTED
    REJECTED
}
